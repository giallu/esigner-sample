# The name of the workflow.
name: Sign Artifact

# Trigger this workflow on a push
on:
  push:
  workflow_dispatch:
    
    inputs:
      MODE:
        description: 'Signing mode'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - test


# Create an environment variable
env:
  MASTER_KEY: master.key
  SIGNABLE_FILE_PATH: HelloWorld.dll
  SIGNABLE_VSIX_FILE_PATH: SSLcom.vsix
  SIGNABLE_APP_FILE_PATH: HelloWorld.app
  INSTALL_DIR: C:\Users\runneradmin\eSignerCKA
  MASTER_KEY_FILE: C:\Users\runneradmin\eSignerCKA\master.key

jobs:
  # Defines job named "sign-file"
  sign-file:
    # Run job on Windows Runner
    runs-on: windows-latest
    # When the workflow runs, this is the name that is logged
    name: Sign DLL File with eSignerCKA
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Download and Unzip eSignerCKA Setup
      - name: Download and Unzip eSignerCKA Setup
        run: |
          Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip "https://github.com/SSLcom/eSignerCKA/releases/download/v1.0.6/SSL.COM-eSigner-CKA_1.0.6.zip"
          Expand-Archive -Force eSigner_CKA_Setup.zip
          Remove-Item eSigner_CKA_Setup.zip
          Move-Item -Destination "eSigner_CKA_Installer.exe" -Path "eSigner_CKA_*\*.exe"

      # 3) Install eSignerCKA
      - name: Setup eSignerCKA in Silent Mode
        run: |
          New-Item -ItemType Directory -Force -Path ${{ env.INSTALL_DIR }}
          Start-Process ".\eSigner_CKA_Installer.exe" -argumentlist '/CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="${{ env.INSTALL_DIR }}"' -wait
          Start-Process ".\setup\vc_redist.x86.exe" -argumentlist "/install /q" -wait
          Start-Process ".\setup\vc_redist.x64.exe" -argumentlist "/install /q" -wait
          ${{ env.INSTALL_DIR }}/RegisterKSP.exe | Out-Null
          ${{ env.INSTALL_DIR }}/eSignerCSP.Config.exe | Out-Null

      # 4) Set SSLcom account information
      - name: Config Account Information on eSignerCKA
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode "${{ inputs.MODE }}" -user "${{ secrets.USERNAME }}" -pass "${{ secrets.PASSWORD }}" -totp "${{ secrets.TOTP_SECRET }}" -key "${{ env.MASTER_KEY_FILE }}" -r

      # 5) Unload and Load certificate to windows certificate store
      - name: Load Certificate into Windows Store
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe unload
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe load

      # 6) Select code signing certificate and get thumprint for signing
      - name: Select Certificate From Windows Store
        run: |
          $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | WHERE { $_.subject -Match "Esigner" }
          echo "THUMBPRINT=$($CodeSigningCert.Thumbprint)" >> $env:GITHUB_ENV

      # 7) Sign artifact with signtool
      - name: Sign Sample File with SignTool
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe' sign /debug /fd sha256 /tr http://ts.ssl.com /td sha256 /sha1 ${{ env.THUMBPRINT }} ${{ env.SIGNABLE_FILE_PATH }}

      # 8) Upload eSignerCKA Logs
      - name: Upload eSignerCKA Logs
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: eSignerCKA-Logs-DLL
          path: C:\Users\runneradmin\AppData\Roaming\eSignerCKA\KSP

  # Defines job named "sign-vsix-file"
  sign-vsix-file:
    # Run job on Windows Runner
    runs-on: windows-latest
    # When the workflow runs, this is the name that is logged
    name: Sign VSIX File with eSignerCKA
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Set up the .NET CLI environment for the workflow to use.
      - name: Setup Dotnet Core
        run: |
          choco install dotnet-runtime -y

      # 3) Download and Unzip eSignerCKA Setup
      - name: Download and Unzip eSignerCKA Setup
        run: |
          Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip "https://github.com/SSLcom/eSignerCKA/releases/download/v1.0.6/SSL.COM-eSigner-CKA_1.0.6.zip"
          Expand-Archive -Force eSigner_CKA_Setup.zip
          Remove-Item eSigner_CKA_Setup.zip
          Move-Item -Destination "eSigner_CKA_Installer.exe" -Path "eSigner_CKA_*\*.exe"

      # 4) Install eSignerCKA
      - name: Setup eSignerCKA in Silent Mode
        run: |
          New-Item -ItemType Directory -Force -Path ${{ env.INSTALL_DIR }}
          Start-Process ".\eSigner_CKA_Installer.exe" -argumentlist '/CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="${{ env.INSTALL_DIR }}"' -wait
          Start-Process ".\setup\vc_redist.x86.exe" -argumentlist "/install /q" -wait
          Start-Process ".\setup\vc_redist.x64.exe" -argumentlist "/install /q" -wait
          ${{ env.INSTALL_DIR }}/RegisterKSP.exe | Out-Null
          ${{ env.INSTALL_DIR }}/eSignerCSP.Config.exe | Out-Null

      # 5) Set SSLcom account information
      - name: Config Account Information on eSignerCKA
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode "${{ secrets.MODE }}" -user "${{ secrets.USERNAME }}" -pass "${{ secrets.PASSWORD }}" -totp "${{ secrets.TOTP_SECRET }}" -key "${{ env.MASTER_KEY_FILE }}" -r

      # 6) Unload and Load certificate to windows certificate store
      - name: Load Certificate into Windows Store
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe unload
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe load

      # 7) Select code signing certificate and get thumprint for signing
      - name: Select Certificate From Windows Store
        run: |
          $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | WHERE { $_.subject -Match "Esigner" }
          echo "THUMBPRINT=$($CodeSigningCert.Thumbprint)" >> $env:GITHUB_ENV

      # 8) Install OpenVsixSignTool to Custom Location (https://github.com/vcsjones/OpenOpcSignTool)
      - name: Install OpenOpcSignTool
        run: |
          New-Item -ItemType Directory -Force -Path C:\Users\runneradmin\Desktop\dotnet-tools
          Invoke-WebRequest -OutFile OpenVsixSignTool.zip https://github.com/SSLcom/eSignerCKA/releases/download/v1.0.4/OpenVsixSignTool_1.0.0-x86.zip
          Move-Item -Path OpenVsixSignTool.zip -Destination C:\Users\runneradmin\Desktop\dotnet-tools\OpenVsixSignTool.zip
          Expand-Archive -LiteralPath C:\Users\runneradmin\Desktop\dotnet-tools\OpenVsixSignTool.zip -DestinationPath C:\Users\runneradmin\Desktop\dotnet-tools -Force

      # 9) Sign artifact with OpenOpcSignTool
      - name: Sign Sample File with OpenVsixSignTool
        run: |
          C:\Users\runneradmin\Desktop\dotnet-tools\OpenVsixSignTool --roll-forward LatestMajor sign --sha1 ${{ env.THUMBPRINT }} --timestamp http://ts.ssl.com -ta sha256 -fd sha256 "${{ env.SIGNABLE_VSIX_FILE_PATH }}"

      # 10) Upload eSignerCKA Logs
      - name: Upload eSignerCKA Logs
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: eSignerCKA-Logs-VSIX
          path: C:\Users\runneradmin\AppData\Roaming\eSignerCKA\KSP

  # Defines job named "sign-app-file"
  sign-app-file:
    # Run job on Windows Runner
    runs-on: windows-latest
    # When the workflow runs, this is the name that is logged
    name: Sign APP File with eSignerCKA
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Download and Unzip eSignerCKA Setup
      - name: Download and Unzip eSignerCKA Setup
        run: |
          Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip "https://github.com/SSLcom/eSignerCKA/releases/download/v1.0.6/SSL.COM-eSigner-CKA_1.0.6.zip"
          Expand-Archive -Force eSigner_CKA_Setup.zip
          Remove-Item eSigner_CKA_Setup.zip
          Move-Item -Destination "eSigner_CKA_Installer.exe" -Path "eSigner_CKA_*\*.exe"

      # 3) Download and Unzip Dynamics 365 Setup
      - name: Download and Unzip Dynamics 365 Setup
        run: |
          Invoke-WebRequest -OutFile Dynamics.365.BC.12841.US.DVD.zip "https://download.microsoft.com/download/3/e/7/3e71083e-6cd6-4598-a6bb-5c602b74aec3/Release/Dynamics.365.BC.12841.US.DVD.zip"
          Expand-Archive -Force Dynamics.365.BC.12841.US.DVD.zip

      # 4) Install Dynamics 365
      - name: Install Dynamics 365
        run: |
          Start-Process ".\Dynamics.365.BC.12841.US.DVD\setup.exe" -argumentlist "/config .\Dynamics.365.BC.12841.US.DVD\Install-NavComponentConfig.xml /quiet" -wait

      # 5) Install eSignerCKA
      - name: Setup eSignerCKA in Silent Mode
        run: |
          New-Item -ItemType Directory -Force -Path ${{ env.INSTALL_DIR }}
          Start-Process ".\eSigner_CKA_Installer.exe" -argumentlist '/CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="${{ env.INSTALL_DIR }}"' -wait
          Start-Process ".\setup\vc_redist.x86.exe" -argumentlist "/install /q" -wait
          Start-Process ".\setup\vc_redist.x64.exe" -argumentlist "/install /q" -wait
          ${{ env.INSTALL_DIR }}/RegisterKSP.exe | Out-Null
          ${{ env.INSTALL_DIR }}/eSignerCSP.Config.exe | Out-Null

      # 6) Set SSLcom account information
      - name: Config Account Information on eSignerCKA
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode "${{ secrets.MODE }}" -user "${{ secrets.USERNAME }}" -pass "${{ secrets.PASSWORD }}" -totp "${{ secrets.TOTP_SECRET }}" -key "${{ env.MASTER_KEY_FILE }}" -r

      # 7) Unload and Load certificate to windows certificate store
      - name: Load Certificate into Windows Store
        run: |
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe unload
          ${{ env.INSTALL_DIR }}/eSignerCKATool.exe load

      # 8) Select code signing certificate and get thumprint for signing
      - name: Select Certificate From Windows Store
        run: |
          $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | WHERE { $_.subject -Match "Esigner" }
          echo "THUMBPRINT=$($CodeSigningCert.Thumbprint)" >> $env:GITHUB_ENV

      # 9) Sign artifact with signtool
      - name: Sign Sample File with SignTool
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe' sign /debug /fd sha256 /tr http://ts.ssl.com /td sha256 /sha1 ${{ env.THUMBPRINT }} ${{ env.SIGNABLE_APP_FILE_PATH }}

      # 10) Upload eSignerCKA Logs
      - name: Upload eSignerCKA Logs
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: eSignerCKA-Logs-APP
          path: C:\Users\runneradmin\AppData\Roaming\eSignerCKA\KSP
